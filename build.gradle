plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
}

group 'br.com.lukinhasssss.admin.catalogo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

apply from: "$project.rootDir/sonar.gradle"

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                //the jacoco extension may be disabled for some projects
                if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                } else {
                    logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.', testTask.getName(), subproject.getName())
                }
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }

            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'br/com/lukinhasssss/admin/catalogo/application/**',
                            'br/com/lukinhasssss/admin/catalogo/infrastructure/**',
                            'br/com/lukinhasssss/admin/catalogo/domain/*.class',
                            'br/com/lukinhasssss/admin/catalogo/domain/category/*Gateway.class',
                            'br/com/lukinhasssss/admin/catalogo/domain/category/*ID.class',
                            'br/com/lukinhasssss/admin/catalogo/domain/category/*SearchQuery.class',
                            'br/com/lukinhasssss/admin/catalogo/domain/category/*Validator.class',
                            'br/com/lukinhasssss/admin/catalogo/domain/pagination/*',
                            'br/com/lukinhasssss/admin/catalogo/domain/validation/*',
                            'br/com/lukinhasssss/admin/catalogo/domain/validation/**',
                            'br/com/lukinhasssss/admin/catalogo/domain/exceptions/*'
                    ])
                }))
            }
        }
    }

    reports {
        xml.enabled true
        html.enabled true
    }
}

subprojects {
    sonarqube {
        properties {
//            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
//            property 'sonar.coverage.jacoco.xmlReportPaths', "$project.rootDir/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
            property "sonar.sources", "src/main"
            property "sonar.tests", "src/test"
            property "sonar.coverage.jacoco.xmlReportPaths", "../build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
            property "sonar.host.url", "https://sonarcloud.io"
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        test.finalizedBy codeCoverageReport
    }
}